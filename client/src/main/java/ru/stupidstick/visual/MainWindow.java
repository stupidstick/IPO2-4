package ru.stupidstick.visual;

import ru.stupidstick.client.Client;
import ru.stupidstick.client.RestTemplateClient;

import javax.swing.*;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;


public class MainWindow extends javax.swing.JFrame {
    ArrayList<GrObject> OBJ = new ArrayList<>();
    GrObjectFactory factory = new GrObjectFactory();
    private Client client = new RestTemplateClient("http://localhost", 8080);

    /**
     * Creates new form Wnd
     */
    public MainWindow() {
        initComponents();
        ArrayList<String> ss = factory.getNames();
        for (String cc : ss)
            TYPE.add(cc);
        this.setBounds(300, 200, 575, 425);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TXT = new javax.swing.JTextArea();
        TT = new javax.swing.JTextField();
        TYPE = new Choice();

        usernameField = new JTextField();
        usernameLabel = new JLabel();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        serverLabel = new JLabel("Interactivity with the server");
        serverLabel.setBounds(150, 5, 300, 20);
        getContentPane().add(serverLabel);

        serverGetButton = new JButton("Get");
        serverGetButton.setBounds(150, 25, 50, 25);
        serverGetButton.addActionListener(listener -> getFromServer());
        getContentPane().add(serverGetButton);

        serverClearButton = new JButton("Clear");
        serverClearButton.setBounds(210, 25, 70, 25);
        getContentPane().add(serverClearButton);
        serverClearButton.addActionListener(listener -> clearOnServer());

        usernameField.setBounds(300, 10, 100, 30);
        getContentPane().add(usernameField);
        usernameLabel.setText("Username");
        usernameLabel.setBounds(410, 15, 100, 20);
        getContentPane().add(usernameLabel);

        TXT.setColumns(20);
        TXT.setRows(5);
        TXT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TXTMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TXT);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 540, 311);

        TT.setText("0");
        getContentPane().add(TT);
        TT.setBounds(10, 50, 540, 30);
        getContentPane().add(TYPE);
        TYPE.setBounds(20, 10, 120, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TXTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TXTMouseClicked
        int xx = evt.getX();
        int yy = evt.getY();
        GrObject pp;
        switch (evt.getButton()) {
            case 1 -> {
                pp = factory.create(TYPE.getSelectedItem());
                pp.setParams(xx, yy, 70, 6, TT.getText(), TXT);
                OBJ.add(pp);
                new Thread(pp).start();
            }
            case 2 -> {
                if (client != null) {
                    int n2 = OBJ.size();
                    for (int i = 0; i < n2; i++) {
                        pp = OBJ.get(i);
                        if (pp.inside(xx, yy)) {
                            saveOnServer(pp);
                            break;
                        }
                    }
                }
            }
            case 3 -> {
                int nn = OBJ.size();
                for (int i = 0; i < nn; i++) {
                    pp = OBJ.get(i);
                    if (pp.inside(xx, yy)) {
                        pp.stop = true;
                        OBJ.remove(i);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_TXTMouseClicked

    private void saveOnServer(GrObject object) {
        String username = usernameField.getText();
        if (username.isBlank()) {
            TT.setText("Username cannot be blank");
            return;
        }
        runWithExceptionHandling(
                () -> {
                    client.sendImage(serialize(object), username);
                    TT.setText("Saved");
                }
        );
    }

    private void getFromServer() {
        String username = usernameField.getText();
        if (username.isBlank()) {
            TT.setText("Username cannot be blank");
            return;
        }
        runWithExceptionHandling(
                () -> {
                    String bodyImages = client.getImages(username);
                    if (bodyImages == null || bodyImages.isBlank()) {
                        TT.setText("No images found");
                        return;
                    }
                    System.out.println("---");
                    String[] images = bodyImages.split("\n");
                    int n = Integer.parseInt(images[0]);
                    try {
                        for (int i = 0; i < n; i++) {
                            Class<?> cc = Class.forName(images[i * 2 + 1]);
                            GrObject pp = (GrObject) cc.newInstance();
                            try (
                                    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
                                            Base64.getDecoder().decode(images[i * 2 + 2])
                                    );
                                    DataInputStream dataInputStream = new DataInputStream(byteArrayInputStream)
                            ) {
                                pp.Load(dataInputStream);
                                pp.setComponent(TXT);
                                OBJ.add(pp);
                                new Thread(pp).start();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        TT.setText("Exception: " + e.getMessage());
                    }
                }
        );
    }

    private void clearOnServer() {
        String username = usernameField.getText();
        if (username.isBlank()) {
            TT.setText("Username cannot be blank");
            return;
        }
        runWithExceptionHandling(
                () -> {
                    client.clearOnServer(username);
                    TT.setText("Cleared");
                }
        );
    }

    private void runWithExceptionHandling(Runnable runnable) {
        try {
            runnable.run();
        } catch (Exception e) {
            TT.setText("Error: " + e.getMessage());
        }
    }

    private String serialize(GrObject grObject) {
        StringBuilder builder = new StringBuilder();
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
             DataOutputStream dos = new DataOutputStream(baos)) {
            builder.append(grObject.getClass().getName()).append('\n');
            grObject.Save(dos);
            builder.append(Base64.getEncoder().encodeToString(baos.toByteArray()));
        } catch (IOException e) {
            TT.setText("Serialize exception: " + e.getMessage());
        }
        return builder.toString();
    }

    public static void setUIManager(String name) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (name.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Throwable ex) {
        }
    }

    public static void main(String args[]) {
        setUIManager("Nimbus");
        EventQueue.invokeLater(() -> new MainWindow().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel serverLabel;
    private JButton serverClearButton;
    private JButton serverGetButton;

    private javax.swing.JTextField TT;
    private javax.swing.JTextArea TXT;
    private JTextField usernameField;
    private JLabel usernameLabel;

    private Choice TYPE;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
